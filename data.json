[
    {
        "role": "assistant",
        "content": "",
        "copilot_references": [],
        "copilot_confirmations": null
    },
    {
        "role": "user",
        "content": "hello",
        "copilot_references": null,
        "copilot_confirmations": null
    },
    {
        "role": "assistant",
        "content": "",
        "copilot_references": [],
        "copilot_confirmations": null
    },
    {
        "role": "user",
        "content": "hello",
        "copilot_references": null,
        "copilot_confirmations": null
    },
    {
        "role": "assistant",
        "content": "Hello! How can I assist you with the code provided in your `server.py` file?",
        "copilot_references": [
            {
                "type": "github.agent",
                "data": {
                    "type": "github.agent",
                    "id": 2252,
                    "login": "doextension",
                    "avatarURL": "https://avatars.githubusercontent.com/u/56139255?s=120&v=4",
                    "url": "https://github.com/apps/doextension"
                },
                "id": "2252",
                "is_implicit": false,
                "metadata": {
                    "display_name": "doextension",
                    "display_icon": "https://avatars.githubusercontent.com/u/56139255?s=120&v=4",
                    "display_url": "https://github.com/apps/doextension"
                }
            }
        ],
        "copilot_confirmations": null
    },
    {
        "role": "user",
        "content": "hello",
        "copilot_references": null,
        "copilot_confirmations": null
    },
    {
        "role": "assistant",
        "content": "Hello! How can I assist you with the code provided in your `server.py` file?",
        "copilot_references": [
            {
                "type": "github.agent",
                "data": {
                    "type": "github.agent",
                    "id": 2252,
                    "login": "doextension",
                    "avatarURL": "https://avatars.githubusercontent.com/u/56139255?s=120&v=4",
                    "url": "https://github.com/apps/doextension"
                },
                "id": "2252",
                "is_implicit": false,
                "metadata": {
                    "display_name": "doextension",
                    "display_icon": "https://avatars.githubusercontent.com/u/56139255?s=120&v=4",
                    "display_url": "https://github.com/apps/doextension"
                }
            }
        ],
        "copilot_confirmations": null
    },
    {
        "role": "user",
        "content": "asjdhsajkdhasjdhksajhdasjhdkajshdkjashdasjk",
        "copilot_references": null,
        "copilot_confirmations": null
    },
    {
        "role": "assistant",
        "content": "",
        "copilot_references": [],
        "copilot_confirmations": null
    },
    {
        "role": "user",
        "content": "sasadsad",
        "copilot_references": [
            {
                "type": "client.file",
                "data": {
                    "content": "import httpx\nfrom fastapi import FastAPI, Request, HTTPException\nfrom fastapi.responses import StreamingResponse\nimport debugpy\nimport json\nfrom system_prompt import SYSTEM_MESSAGE  # SYSTEM_MESSAGE is a dictionary\n\napp = FastAPI()\ndebugpy.listen((\"0.0.0.0\", 8888))\n\n\ndef prepare_messages(messages: list, code_context: str = \"\") -> list:\n    \"\"\"Append SYSTEM_MESSAGE to the extracted messages, including code context if available.\"\"\"\n    if code_context:\n        SYSTEM_MESSAGE[\"content\"] += f\"\\n\\nHere is the full content of the latest file:\\n{code_context}\"\n    return messages + [SYSTEM_MESSAGE] if messages else [SYSTEM_MESSAGE]\n\n\nasync def get_github_completion(messages: list, auth_token: str):\n    \"\"\"Send messages to GitHub Copilot API.\"\"\"\n    if not messages:\n        raise HTTPException(status_code=400, detail=\"No messages provided\")\n\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"https://api.githubcopilot.com/chat/completions\",\n            headers={\n                \"Authorization\": f\"Bearer {auth_token}\",\n                \"Content-Type\": \"application/json\",\n            },\n            json={\n                \"messages\": messages,\n                \"stream\": True,\n            },\n            timeout=30.0,\n        )\n        return response\n\n\n@app.post(\"/completion\")\nasync def completion(request: Request):\n    \"\"\"Extract last 10 messages, process them, and send to GitHub Copilot.\"\"\"\n    req = await request.json()\n    auth_token = request.headers.get(\"x-github-token\")\n\n    # Extract only the last 10 messages\n    messages = req.get(\"messages\", [])[-10:]\n\n    if not auth_token:\n        raise HTTPException(status_code=401, detail=\"Missing authentication token\")\n\n    if not messages:\n        raise HTTPException(status_code=400, detail=\"No messages provided\")\n\n    # Extract code content from the latest message if references exist\n    code_context = \"\"\n    latest_message = messages[-1]\n    if latest_message.get(\"copilot_references\"):\n        for ref in latest_message[\"copilot_references\"]:\n            if ref.get(\"type\") == \"client.file\":\n                file_name = ref[\"id\"]\n                code_content = ref[\"data\"][\"content\"]\n                code_context = f\"Filename: `{file_name}`\\n\\n{code_content}\"\n\n    # Prepare messages, modifying SYSTEM_MESSAGE directly\n    final_messages = prepare_messages(messages, code_context)\n\n    # Dump messages to data.json\n    with open(\"data.json\", \"w\") as f:\n        json.dump(final_messages, f, indent=4)\n\n    response = await get_github_completion(final_messages, auth_token)\n\n    return StreamingResponse(\n        response.aiter_bytes(),\n        media_type=\"text/event-stream\",\n        status_code=response.status_code,\n    )\n",
                    "language": "python"
                },
                "id": "server.py",
                "is_implicit": true,
                "metadata": {
                    "display_name": "",
                    "display_icon": "",
                    "display_url": ""
                }
            },
            {
                "type": "client.selection",
                "data": {
                    "content": "\n",
                    "end": {
                        "col": 0,
                        "line": 71
                    },
                    "start": {
                        "col": 0,
                        "line": 70
                    }
                },
                "id": "server.py",
                "is_implicit": true,
                "metadata": {
                    "display_name": "",
                    "display_icon": "",
                    "display_url": ""
                }
            }
        ],
        "copilot_confirmations": null
    },
    {
        "role": "system",
        "content": "You are an AI programming assistant. When responding, follow these steps:\n\n1. First analyze any provided code context thoroughly\n2. Consider the DigitalOcean Product Documentation Bot context if available\n3. Break down the user's question/request\n4. Develop your response following clear reasoning\n5. Provide specific code references or examples when relevant\n\nRespond to questions specifically related to the code files provided. Analyze and reference the code context when answering. Explain implementation details, provide suggestions for improvements, and help with debugging when relevant. Always consider the full code context in your responses. \n\nYou will receive context from a DigitalOcean Product Documentation Bot - use this specialized knowledge as the foundation for your responses when dealing with DigitalOcean-specific implementations. If no DigitalOcean context is provided, respond to the best of your ability with general programming knowledge.\n\nThink through your responses systematically and explain your reasoning clearly.\n\nHere is the full content of the latest file:\nFilename: `server.py`\n\nimport httpx\nfrom fastapi import FastAPI, Request, HTTPException\nfrom fastapi.responses import StreamingResponse\nimport debugpy\nimport json\nfrom system_prompt import SYSTEM_MESSAGE  # SYSTEM_MESSAGE is a dictionary\n\napp = FastAPI()\ndebugpy.listen((\"0.0.0.0\", 8888))\n\n\ndef prepare_messages(messages: list, code_context: str = \"\") -> list:\n    \"\"\"Append SYSTEM_MESSAGE to the extracted messages, including code context if available.\"\"\"\n    if code_context:\n        SYSTEM_MESSAGE[\"content\"] += f\"\\n\\nHere is the full content of the latest file:\\n{code_context}\"\n    return messages + [SYSTEM_MESSAGE] if messages else [SYSTEM_MESSAGE]\n\n\nasync def get_github_completion(messages: list, auth_token: str):\n    \"\"\"Send messages to GitHub Copilot API.\"\"\"\n    if not messages:\n        raise HTTPException(status_code=400, detail=\"No messages provided\")\n\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"https://api.githubcopilot.com/chat/completions\",\n            headers={\n                \"Authorization\": f\"Bearer {auth_token}\",\n                \"Content-Type\": \"application/json\",\n            },\n            json={\n                \"messages\": messages,\n                \"stream\": True,\n            },\n            timeout=30.0,\n        )\n        return response\n\n\n@app.post(\"/completion\")\nasync def completion(request: Request):\n    \"\"\"Extract last 10 messages, process them, and send to GitHub Copilot.\"\"\"\n    req = await request.json()\n    auth_token = request.headers.get(\"x-github-token\")\n\n    # Extract only the last 10 messages\n    messages = req.get(\"messages\", [])[-10:]\n\n    if not auth_token:\n        raise HTTPException(status_code=401, detail=\"Missing authentication token\")\n\n    if not messages:\n        raise HTTPException(status_code=400, detail=\"No messages provided\")\n\n    # Extract code content from the latest message if references exist\n    code_context = \"\"\n    latest_message = messages[-1]\n    if latest_message.get(\"copilot_references\"):\n        for ref in latest_message[\"copilot_references\"]:\n            if ref.get(\"type\") == \"client.file\":\n                file_name = ref[\"id\"]\n                code_content = ref[\"data\"][\"content\"]\n                code_context = f\"Filename: `{file_name}`\\n\\n{code_content}\"\n\n    # Prepare messages, modifying SYSTEM_MESSAGE directly\n    final_messages = prepare_messages(messages, code_context)\n\n    # Dump messages to data.json\n    with open(\"data.json\", \"w\") as f:\n        json.dump(final_messages, f, indent=4)\n\n    response = await get_github_completion(final_messages, auth_token)\n\n    return StreamingResponse(\n        response.aiter_bytes(),\n        media_type=\"text/event-stream\",\n        status_code=response.status_code,\n    )\n\n\nHere is the full content of the latest file:\nFilename: `server.py`\n\nimport httpx\nfrom fastapi import FastAPI, Request, HTTPException\nfrom fastapi.responses import StreamingResponse\nimport debugpy\nimport json\nfrom system_prompt import SYSTEM_MESSAGE  # SYSTEM_MESSAGE is a dictionary\n\napp = FastAPI()\ndebugpy.listen((\"0.0.0.0\", 8888))\n\n\ndef prepare_messages(messages: list, code_context: str = \"\") -> list:\n    \"\"\"Append SYSTEM_MESSAGE to the extracted messages, including code context if available.\"\"\"\n    if code_context:\n        SYSTEM_MESSAGE[\"content\"] += f\"\\n\\nHere is the full content of the latest file:\\n{code_context}\"\n    return messages + [SYSTEM_MESSAGE] if messages else [SYSTEM_MESSAGE]\n\n\nasync def get_github_completion(messages: list, auth_token: str):\n    \"\"\"Send messages to GitHub Copilot API.\"\"\"\n    if not messages:\n        raise HTTPException(status_code=400, detail=\"No messages provided\")\n\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"https://api.githubcopilot.com/chat/completions\",\n            headers={\n                \"Authorization\": f\"Bearer {auth_token}\",\n                \"Content-Type\": \"application/json\",\n            },\n            json={\n                \"messages\": messages,\n                \"stream\": True,\n            },\n            timeout=30.0,\n        )\n        return response\n\n\n@app.post(\"/completion\")\nasync def completion(request: Request):\n    \"\"\"Extract last 10 messages, process them, and send to GitHub Copilot.\"\"\"\n    req = await request.json()\n    auth_token = request.headers.get(\"x-github-token\")\n\n    # Extract only the last 10 messages\n    messages = req.get(\"messages\", [])[-10:]\n\n    if not auth_token:\n        raise HTTPException(status_code=401, detail=\"Missing authentication token\")\n\n    if not messages:\n        raise HTTPException(status_code=400, detail=\"No messages provided\")\n\n    # Extract code content from the latest message if references exist\n    code_context = \"\"\n    latest_message = messages[-1]\n    if latest_message.get(\"copilot_references\"):\n        for ref in latest_message[\"copilot_references\"]:\n            if ref.get(\"type\") == \"client.file\":\n                file_name = ref[\"id\"]\n                code_content = ref[\"data\"][\"content\"]\n                code_context = f\"Filename: `{file_name}`\\n\\n{code_content}\"\n\n    # Prepare messages, modifying SYSTEM_MESSAGE directly\n    final_messages = prepare_messages(messages, code_context)\n\n    # Dump messages to data.json\n    with open(\"data.json\", \"w\") as f:\n        json.dump(final_messages, f, indent=4)\n\n    response = await get_github_completion(final_messages, auth_token)\n\n    return StreamingResponse(\n        response.aiter_bytes(),\n        media_type=\"text/event-stream\",\n        status_code=response.status_code,\n    )\n\n\nHere is the full content of the latest file:\nFilename: `server.py`\n\nimport httpx\nfrom fastapi import FastAPI, Request, HTTPException\nfrom fastapi.responses import StreamingResponse\nimport debugpy\nimport json\nfrom system_prompt import SYSTEM_MESSAGE  # SYSTEM_MESSAGE is a dictionary\n\napp = FastAPI()\ndebugpy.listen((\"0.0.0.0\", 8888))\n\n\ndef prepare_messages(messages: list, code_context: str = \"\") -> list:\n    \"\"\"Append SYSTEM_MESSAGE to the extracted messages, including code context if available.\"\"\"\n    if code_context:\n        SYSTEM_MESSAGE[\"content\"] += f\"\\n\\nHere is the full content of the latest file:\\n{code_context}\"\n    return messages + [SYSTEM_MESSAGE] if messages else [SYSTEM_MESSAGE]\n\n\nasync def get_github_completion(messages: list, auth_token: str):\n    \"\"\"Send messages to GitHub Copilot API.\"\"\"\n    if not messages:\n        raise HTTPException(status_code=400, detail=\"No messages provided\")\n\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"https://api.githubcopilot.com/chat/completions\",\n            headers={\n                \"Authorization\": f\"Bearer {auth_token}\",\n                \"Content-Type\": \"application/json\",\n            },\n            json={\n                \"messages\": messages,\n                \"stream\": True,\n            },\n            timeout=30.0,\n        )\n        return response\n\n\n@app.post(\"/completion\")\nasync def completion(request: Request):\n    \"\"\"Extract last 10 messages, process them, and send to GitHub Copilot.\"\"\"\n    req = await request.json()\n    auth_token = request.headers.get(\"x-github-token\")\n\n    # Extract only the last 10 messages\n    messages = req.get(\"messages\", [])[-10:]\n\n    if not auth_token:\n        raise HTTPException(status_code=401, detail=\"Missing authentication token\")\n\n    if not messages:\n        raise HTTPException(status_code=400, detail=\"No messages provided\")\n\n    # Extract code content from the latest message if references exist\n    code_context = \"\"\n    latest_message = messages[-1]\n    if latest_message.get(\"copilot_references\"):\n        for ref in latest_message[\"copilot_references\"]:\n            if ref.get(\"type\") == \"client.file\":\n                file_name = ref[\"id\"]\n                code_content = ref[\"data\"][\"content\"]\n                code_context = f\"Filename: `{file_name}`\\n\\n{code_content}\"\n\n    # Prepare messages, modifying SYSTEM_MESSAGE directly\n    final_messages = prepare_messages(messages, code_context)\n\n    # Dump messages to data.json\n    with open(\"data.json\", \"w\") as f:\n        json.dump(final_messages, f, indent=4)\n\n    response = await get_github_completion(final_messages, auth_token)\n\n    return StreamingResponse(\n        response.aiter_bytes(),\n        media_type=\"text/event-stream\",\n        status_code=response.status_code,\n    )\n\n\nHere is the full content of the latest file:\nFilename: `server.py`\n\nimport httpx\nfrom fastapi import FastAPI, Request, HTTPException\nfrom fastapi.responses import StreamingResponse\nimport debugpy\nimport json\nfrom system_prompt import SYSTEM_MESSAGE  # SYSTEM_MESSAGE is a dictionary\n\napp = FastAPI()\ndebugpy.listen((\"0.0.0.0\", 8888))\n\n\ndef prepare_messages(messages: list, code_context: str = \"\") -> list:\n    \"\"\"Append SYSTEM_MESSAGE to the extracted messages, including code context if available.\"\"\"\n    if code_context:\n        SYSTEM_MESSAGE[\"content\"] += f\"\\n\\nHere is the full content of the latest file:\\n{code_context}\"\n    return messages + [SYSTEM_MESSAGE] if messages else [SYSTEM_MESSAGE]\n\n\nasync def get_github_completion(messages: list, auth_token: str):\n    \"\"\"Send messages to GitHub Copilot API.\"\"\"\n    if not messages:\n        raise HTTPException(status_code=400, detail=\"No messages provided\")\n\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"https://api.githubcopilot.com/chat/completions\",\n            headers={\n                \"Authorization\": f\"Bearer {auth_token}\",\n                \"Content-Type\": \"application/json\",\n            },\n            json={\n                \"messages\": messages,\n                \"stream\": True,\n            },\n            timeout=30.0,\n        )\n        return response\n\n\n@app.post(\"/completion\")\nasync def completion(request: Request):\n    \"\"\"Extract last 10 messages, process them, and send to GitHub Copilot.\"\"\"\n    req = await request.json()\n    auth_token = request.headers.get(\"x-github-token\")\n\n    # Extract only the last 10 messages\n    messages = req.get(\"messages\", [])[-10:]\n\n    if not auth_token:\n        raise HTTPException(status_code=401, detail=\"Missing authentication token\")\n\n    if not messages:\n        raise HTTPException(status_code=400, detail=\"No messages provided\")\n\n    # Extract code content from the latest message if references exist\n    code_context = \"\"\n    latest_message = messages[-1]\n    if latest_message.get(\"copilot_references\"):\n        for ref in latest_message[\"copilot_references\"]:\n            if ref.get(\"type\") == \"client.file\":\n                file_name = ref[\"id\"]\n                code_content = ref[\"data\"][\"content\"]\n                code_context = f\"Filename: `{file_name}`\\n\\n{code_content}\"\n\n    # Prepare messages, modifying SYSTEM_MESSAGE directly\n    final_messages = prepare_messages(messages, code_context)\n\n    # Dump messages to data.json\n    with open(\"data.json\", \"w\") as f:\n        json.dump(final_messages, f, indent=4)\n\n    response = await get_github_completion(final_messages, auth_token)\n\n    return StreamingResponse(\n        response.aiter_bytes(),\n        media_type=\"text/event-stream\",\n        status_code=response.status_code,\n    )\n"
    }
]